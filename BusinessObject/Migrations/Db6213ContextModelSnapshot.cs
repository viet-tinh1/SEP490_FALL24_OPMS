// <auto-generated />
using System;
using BusinessObject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(Db6213Context))]
    partial class Db6213ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B71E9E287");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime?>("CommentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("comment_time");

                    b.Property<string>("CommentsContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("comments_content");

                    b.Property<int?>("LikeComment")
                        .HasColumnType("int")
                        .HasColumnName("like_comment");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__E79576877C64DB3D");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BusinessObject.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FeedbackText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Rating")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF6F43B81ED");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Fplant", b =>
                {
                    b.Property<int>("FplantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FplantId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FplantImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FPlantImage");

                    b.Property<string>("FplantName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FPlantName");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FplantId")
                        .HasName("PK__FPlants__09421B22963E7690");

                    b.HasIndex("UserId");

                    b.ToTable("FPlants", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E3217936E20");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("IsSuccess")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShoppingCartItemId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("('Pending')");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK_Orders_OrderID");

                    b.HasIndex("ShoppingCartItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BusinessObject.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<bool?>("IsPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("PlantID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C2808A6A4");

                    b.HasIndex("OrderId");

                    b.HasIndex("PlantId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("BuyerID");

                    b.Property<bool?>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("PlantID");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionId")
                        .HasName("PK__Payment__55433A4B839502E1");

                    b.HasIndex("BuyerId");

                    b.HasIndex("PlantId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("discount");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<int?>("IsVerfied")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PlantId")
                        .HasName("PK__Plants__98FE46BCC0649373");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("BusinessObject.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<DateTime?>("Createdate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdate");

                    b.Property<int?>("LikePost")
                        .HasColumnType("int")
                        .HasColumnName("like_post");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_content");

                    b.Property<string>("PostImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_image");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__3ED7876638BD9BE8");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BusinessObject.Models.PostLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LikeId")
                        .HasName("PK__Post_Lik__A2922C143D71D738");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post_Like", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.ReplyComment", b =>
                {
                    b.Property<int>("ReplyCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reply_comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyCommentId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<string>("ReplyCommentContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Reply_comment_content");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReplyCommentId")
                        .HasName("PK__ReplyCom__D67290473B855866");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("ReplyComment", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("PlantID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AE08292853");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BusinessObject.Models.ShoppingCart", b =>
                {
                    b.Property<int?>("ShoppingCartItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ShoppingCartItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Shopping_Cart", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemId"));

                    b.Property<int>("PlantId")
                        .HasColumnType("int")
                        .HasColumnName("PlantID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartItemId")
                        .HasName("PK__Cart__51BCD7B7E3ACDBAD");

                    b.HasIndex("PlantId");

                    b.ToTable("Shopping_Cart_Item", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IsSellerRequest")
                        .HasColumnType("int");

                    b.Property<int>("IsVerifyEmail")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<string>("ShopName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("shop_name");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC5408B395");

                    b.HasIndex(new[] { "Username" }, "UQ_Users_Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObject.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("close_date");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("open_date");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("VoucherName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("voucher_name");

                    b.Property<decimal?>("VoucherPercent")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("voucher_percent");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__80B6FFA86981BAF1");

                    b.HasIndex("UserId");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.HasOne("BusinessObject.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__post_i__2645B050");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__UserID__2739D489");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Fplant", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Fplants")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FPlants__UserID__4316F928");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Notification", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__5EBF139D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.HasOne("BusinessObject.Models.ShoppingCartItem", "ShoppingCartItem")
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingCartItemId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__CartId__4CA06362");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Orders_Users");

                    b.Navigation("ShoppingCartItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.OrderDetail", b =>
                {
                    b.HasOne("BusinessObject.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_OrderID");

                    b.HasOne("BusinessObject.Models.Plant", "Plant")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PlantId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Plant__5165187F");

                    b.Navigation("Order");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("BusinessObject.Models.Payment", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "Buyer")
                        .WithMany("Payments")
                        .HasForeignKey("BuyerId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__BuyerID__5535A963");

                    b.HasOne("BusinessObject.Models.Plant", "Plant")
                        .WithMany("Payments")
                        .HasForeignKey("PlantId")
                        .IsRequired()
                        .HasConstraintName("FK__Payment__PlantID__5629CD9C");

                    b.Navigation("Buyer");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("BusinessObject.Models.Plant", b =>
                {
                    b.HasOne("BusinessObject.Models.Category", "Category")
                        .WithMany("Plants")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Plants__Category__3F466844");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Plants")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Plants__UserID__3E52440B");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Post", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Posts__UserID__236943A5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.PostLike", b =>
                {
                    b.HasOne("BusinessObject.Models.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK__Post_Like__post___41EDCAC5");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Post_Like__UserI__42E1EEFE");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.ReplyComment", b =>
                {
                    b.HasOne("BusinessObject.Models.Comment", "Comment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK__ReplyComm__comme__2A164134");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("ReplyComments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ReplyComm__UserI__2B0A656D");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Review", b =>
                {
                    b.HasOne("BusinessObject.Models.Plant", "Plant")
                        .WithMany("Reviews")
                        .HasForeignKey("PlantId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__PlantID__5AEE82B9");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__UserID__59FA5E80");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.ShoppingCart", b =>
                {
                    b.HasOne("BusinessObject.Models.ShoppingCartItem", "ShoppingCartItem")
                        .WithMany()
                        .HasForeignKey("ShoppingCartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CartUser__CartId__48CFD27E");

                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CartUser__UserID__47DBAE45");

                    b.Navigation("ShoppingCartItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("BusinessObject.Models.Plant", "Plant")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("PlantId")
                        .IsRequired()
                        .HasConstraintName("FK__Cart__PlantID__45F365D3");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("BusinessObject.Models.Voucher", b =>
                {
                    b.HasOne("BusinessObject.Models.User", "User")
                        .WithMany("Vouchers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Voucher_UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Models.Category", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("BusinessObject.Models.Comment", b =>
                {
                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("BusinessObject.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObject.Models.Plant", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("BusinessObject.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("BusinessObject.Models.ShoppingCartItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObject.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Fplants");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Plants");

                    b.Navigation("PostLikes");

                    b.Navigation("Posts");

                    b.Navigation("ReplyComments");

                    b.Navigation("Reviews");

                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
